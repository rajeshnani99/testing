{"ast":null,"code":"// src/textarea.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\"; // ../../utilities/object-utils/src/index.ts\n\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n\n  return clone;\n} // src/textarea.tsx\n\n\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const {\n    className,\n    rows,\n    ...rest\n  } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */jsx(chakra.textarea, {\n    ref,\n    rows,\n    ...textareaProps,\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  });\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"names":["useFormControl","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","omit","object","keysToOmit","clone","Object","assign","key","jsx","omitted","Textarea","props","ref","styles","className","rows","rest","textareaProps","textareaStyles","textarea","__css","displayName"],"sources":["/Users/rajesh/Desktop/ChatApp/reactchatapp/public/node_modules/@chakra-ui/textarea/dist/chunk-OEQDSMWZ.mjs"],"sourcesContent":["// src/textarea.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/textarea.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const { className, rows, ...rest } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */ jsx(\n    chakra.textarea,\n    {\n      ref,\n      rows,\n      ...textareaProps,\n      className: cx(\"chakra-textarea\", className),\n      __css: textareaStyles\n    }\n  );\n});\nTextarea.displayName = \"Textarea\";\n\nexport {\n  Textarea\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAT,QAA+B,yBAA/B;AACA,SACEC,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAIEC,cAJF,QAKO,mBALP;AAMA,SAASC,EAAT,QAAmB,yBAAnB,C,CAEA;;AACA,SAASC,IAAT,CAAcC,MAAd,EAAuC;EAAA,IAAjBC,UAAiB,uEAAJ,EAAI;EACrC,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,MAAlB,CAAd;;EACA,KAAK,MAAMK,GAAX,IAAkBJ,UAAlB,EAA8B;IAC5B,IAAII,GAAG,IAAIH,KAAX,EAAkB;MAChB,OAAOA,KAAK,CAACG,GAAD,CAAZ;IACD;EACF;;EACD,OAAOH,KAAP;AACD,C,CAED;;;AACA,SAASI,GAAT,QAAoB,mBAApB;AACA,IAAIC,OAAO,GAAG,CAAC,GAAD,EAAM,MAAN,EAAc,QAAd,EAAwB,WAAxB,CAAd;AACA,IAAIC,QAAQ,GAAGb,UAAU,CAAC,CAACc,KAAD,EAAQC,GAAR,KAAgB;EACxC,MAAMC,MAAM,GAAGd,cAAc,CAAC,UAAD,EAAaY,KAAb,CAA7B;EACA,MAAM;IAAEG,SAAF;IAAaC,IAAb;IAAmB,GAAGC;EAAtB,IAA+BlB,gBAAgB,CAACa,KAAD,CAArD;EACA,MAAMM,aAAa,GAAGtB,cAAc,CAACqB,IAAD,CAApC;EACA,MAAME,cAAc,GAAGH,IAAI,GAAGd,IAAI,CAACY,MAAD,EAASJ,OAAT,CAAP,GAA2BI,MAAtD;EACA,OAAO,eAAgBL,GAAG,CACxBZ,MAAM,CAACuB,QADiB,EAExB;IACEP,GADF;IAEEG,IAFF;IAGE,GAAGE,aAHL;IAIEH,SAAS,EAAEd,EAAE,CAAC,iBAAD,EAAoBc,SAApB,CAJf;IAKEM,KAAK,EAAEF;EALT,CAFwB,CAA1B;AAUD,CAfwB,CAAzB;AAgBAR,QAAQ,CAACW,WAAT,GAAuB,UAAvB;AAEA,SACEX,QADF"},"metadata":{},"sourceType":"module"}