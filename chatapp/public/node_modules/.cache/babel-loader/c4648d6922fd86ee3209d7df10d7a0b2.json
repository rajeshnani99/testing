{"ast":null,"code":"var _s = $RefreshSig$();\n\n/** @format */\n\n/** @format */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ChatInput from \"./ChatInput\";\nimport Logout from \"./Logout\";\nimport axios from \"axios\";\nimport { getAllMessagesRoute, sendMessageRoute } from \"../utils/APIRoutes\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GroupchatContainer(_ref) {\n  _s();\n\n  let {\n    currentChat,\n    currentUser,\n    socket\n  } = _ref;\n  // console.log(`current chat :${JSON.stringify(currentChat)}`);\n  // console.log(`current user : ${JSON.stringify(currentUser)}`);\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const scrollRef = useRef();\n  useEffect(() => {\n    const fetchData = async () => {\n      if (currentChat) {\n        const response = await axios.post(getAllMessagesRoute, {\n          from: currentUser._id,\n          to: currentChat._id\n        });\n        setMessages(response.data);\n        console.log(response); //fetching single person chat Messages from db\n\n        console.log(\"chat message :\" + JSON.stringify(response.data));\n      }\n    };\n\n    fetchData();\n  }, [currentChat]);\n\n  const handleSendMsg = async msg => {\n    await axios.post(sendMessageRoute, {\n      from: currentUser._id,\n      to: currentChat._id,\n      message: msg\n    });\n    socket.current.emit(\"send-msg\", {\n      to: currentChat._id,\n      from: currentUser._id,\n      message: msg\n    });\n    const msgs = [...messages];\n    console.log(`messages :${JSON.stringify(msgs)}`);\n    msgs.push({\n      fromSelf: true,\n      message: msg\n    });\n    setMessages(msgs); // post message to db and emitting server\n    //console.log(\"sent Message :\" + JSON.stringify(msgs));\n  };\n\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"msg-recieved\", msg => {\n        setArrivalMessage({\n          fromSelf: false,\n          message: msg\n        });\n      });\n    }\n  }, []);\n  useEffect(() => {\n    arrivalMessage && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage]);\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]); //console.log(JSON.stringify(messages));\n\n  return (\n    /*#__PURE__*/\n    // <>\n    // \t{currentChat && (\n    // \t\t<Container>\n    // \t\t\t<div className=\"chat-header\">\n    // \t\t\t\t<div className=\"user-details\">\n    // \t\t\t\t\t<div className=\"avatar\">\n    // \t\t\t\t\t\t<img\n    // \t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n    // \t\t\t\t\t\t\talt=\"avatar\"\n    // \t\t\t\t\t\t/>\n    // \t\t\t\t\t</div>\n    // \t\t\t\t\t<div className=\"username\">\n    // \t\t\t\t\t\t<h3>{currentChat.username}:User Name</h3>\n    // \t\t\t\t\t</div>\n    // \t\t\t\t</div>\n    // \t\t\t\t<Logout />\n    // \t\t\t</div>\n    // \t\t\t<div className=\"chat-messages\">\n    // \t\t\t\t{messages.map((message) => {\n    // \t\t\t\t\treturn (\n    // \t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n    // \t\t\t\t\t\t\t<div\n    // \t\t\t\t\t\t\t\tclassName={`message ${\n    // \t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n    // \t\t\t\t\t\t\t\t}`}>\n    // \t\t\t\t\t\t\t\t<div className=\"content \">\n    // \t\t\t\t\t\t\t\t\t<p>{message.message}</p>\n    // \t\t\t\t\t\t\t\t</div>\n    // \t\t\t\t\t\t\t</div>\n    // \t\t\t\t\t\t</div>\n    // \t\t\t\t\t);\n    // \t\t\t\t})}\n    // \t\t\t</div>\n    // \t\t\t<ChatInput handleSendMsg={handleSendMsg} />\n    // \t\t</Container>\n    // \t)}\n    // </>\n    _jsxDEV(_Fragment, {\n      children: \"Group chat container displayed\"\n    }, void 0, false)\n  );\n}\n\n_s(GroupchatContainer, \"JfFSEdQKAcT6qp/80mIe4QU2dtg=\");\n\n_c = GroupchatContainer;\nconst Container = styled.div`\n\tdisplay: grid;\n\tgrid-template-rows: 10% 80% 10%;\n\tgap: 0.1rem;\n\toverflow: hidden;\n\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\tgrid-template-rows: 15% 70% 15%;\n\t}\n\t.chat-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 0 2rem;\n\t\t.user-details {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 1rem;\n\t\t\t.avatar {\n\t\t\t\timg {\n\t\t\t\t\theight: 3rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t.username {\n\t\t\t\th3 {\n\t\t\t\t\tcolor: white;\n\t\t\t\t\ttext-transform: capitalize;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t.chat-messages {\n\t\tpadding: 1rem 2rem;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t\toverflow: auto;\n\t\t&::-webkit-scrollbar {\n\t\t\twidth: 0.2rem;\n\t\t\t&-thumb {\n\t\t\t\tbackground-color: #ffffff39;\n\t\t\t\twidth: 0.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t}\n\t\t}\n\t\t.message {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\t.content {\n\t\t\t\tmax-width: 40%;\n\t\t\t\toverflow-wrap: break-word;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tfont-size: 1.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t\tcolor: #d1d1d1;\n\t\t\t\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\t\t\t\tmax-width: 70%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.sended {\n\t\t\tjustify-content: flex-end;\n\t\t\t.content {\n\t\t\t\tbackground-color: #4f04ff21;\n\t\t\t}\n\t\t}\n\t\t.recieved {\n\t\t\tjustify-content: flex-start;\n\t\t\t.content {\n\t\t\t\tbackground-color: #9900ff20;\n\t\t\t}\n\t\t}\n\t}\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupchatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","ChatInput","Logout","axios","getAllMessagesRoute","sendMessageRoute","v4","uuidv4","GroupchatContainer","currentChat","currentUser","socket","messages","setMessages","arrivalMessage","setArrivalMessage","scrollRef","fetchData","response","post","from","_id","to","data","console","log","JSON","stringify","handleSendMsg","msg","message","current","emit","msgs","push","fromSelf","on","prev","scrollIntoView","behavior","Container","div"],"sources":["/Users/rajesh/Desktop/Dev/chatapp/public/src/components/GroupchatContainer.jsx"],"sourcesContent":["/** @format */\n/** @format */\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport ChatInput from \"./ChatInput\";\nimport Logout from \"./Logout\";\nimport axios from \"axios\";\nimport { getAllMessagesRoute, sendMessageRoute } from \"../utils/APIRoutes\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function GroupchatContainer({\n\tcurrentChat,\n\tcurrentUser,\n\tsocket,\n}) {\n\t// console.log(`current chat :${JSON.stringify(currentChat)}`);\n\t// console.log(`current user : ${JSON.stringify(currentUser)}`);\n\tconst [messages, setMessages] = useState([]);\n\tconst [arrivalMessage, setArrivalMessage] = useState(null);\n\tconst scrollRef = useRef();\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tif (currentChat) {\n\t\t\t\tconst response = await axios.post(getAllMessagesRoute, {\n\t\t\t\t\tfrom: currentUser._id,\n\t\t\t\t\tto: currentChat._id,\n\t\t\t\t});\n\t\t\t\tsetMessages(response.data);\n\t\t\t\tconsole.log(response);\n\t\t\t\t//fetching single person chat Messages from db\n\t\t\t\tconsole.log(\"chat message :\" + JSON.stringify(response.data));\n\t\t\t}\n\t\t};\n\t\tfetchData();\n\t}, [currentChat]);\n\n\tconst handleSendMsg = async (msg) => {\n\t\tawait axios.post(sendMessageRoute, {\n\t\t\tfrom: currentUser._id,\n\t\t\tto: currentChat._id,\n\t\t\tmessage: msg,\n\t\t});\n\t\tsocket.current.emit(\"send-msg\", {\n\t\t\tto: currentChat._id,\n\t\t\tfrom: currentUser._id,\n\t\t\tmessage: msg,\n\t\t});\n\n\t\tconst msgs = [...messages];\n\t\tconsole.log(`messages :${JSON.stringify(msgs)}`);\n\t\tmsgs.push({\n\t\t\tfromSelf: true,\n\t\t\tmessage: msg,\n\t\t});\n\t\tsetMessages(msgs);\n\t\t// post message to db and emitting server\n\t\t//console.log(\"sent Message :\" + JSON.stringify(msgs));\n\t};\n\n\tuseEffect(() => {\n\t\tif (socket.current) {\n\t\t\tsocket.current.on(\"msg-recieved\", (msg) => {\n\t\t\t\tsetArrivalMessage({\n\t\t\t\t\tfromSelf: false,\n\t\t\t\t\tmessage: msg,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tarrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\n\t}, [arrivalMessage]);\n\n\tuseEffect(() => {\n\t\tscrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n\t}, [messages]);\n\n\t//console.log(JSON.stringify(messages));\n\n\treturn (\n\t\t// <>\n\t\t// \t{currentChat && (\n\t\t// \t\t<Container>\n\t\t// \t\t\t<div className=\"chat-header\">\n\t\t// \t\t\t\t<div className=\"user-details\">\n\t\t// \t\t\t\t\t<div className=\"avatar\">\n\t\t// \t\t\t\t\t\t<img\n\t\t// \t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n\t\t// \t\t\t\t\t\t\talt=\"avatar\"\n\t\t// \t\t\t\t\t\t/>\n\t\t// \t\t\t\t\t</div>\n\t\t// \t\t\t\t\t<div className=\"username\">\n\t\t// \t\t\t\t\t\t<h3>{currentChat.username}:User Name</h3>\n\t\t// \t\t\t\t\t</div>\n\t\t// \t\t\t\t</div>\n\t\t// \t\t\t\t<Logout />\n\t\t// \t\t\t</div>\n\t\t// \t\t\t<div className=\"chat-messages\">\n\t\t// \t\t\t\t{messages.map((message) => {\n\t\t// \t\t\t\t\treturn (\n\t\t// \t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n\t\t// \t\t\t\t\t\t\t<div\n\t\t// \t\t\t\t\t\t\t\tclassName={`message ${\n\t\t// \t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n\t\t// \t\t\t\t\t\t\t\t}`}>\n\t\t// \t\t\t\t\t\t\t\t<div className=\"content \">\n\t\t// \t\t\t\t\t\t\t\t\t<p>{message.message}</p>\n\t\t// \t\t\t\t\t\t\t\t</div>\n\t\t// \t\t\t\t\t\t\t</div>\n\t\t// \t\t\t\t\t\t</div>\n\t\t// \t\t\t\t\t);\n\t\t// \t\t\t\t})}\n\t\t// \t\t\t</div>\n\t\t// \t\t\t<ChatInput handleSendMsg={handleSendMsg} />\n\t\t// \t\t</Container>\n\t\t// \t)}\n\t\t// </>\n\t\t<>Group chat container displayed</>\n\t);\n}\n\nconst Container = styled.div`\n\tdisplay: grid;\n\tgrid-template-rows: 10% 80% 10%;\n\tgap: 0.1rem;\n\toverflow: hidden;\n\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\tgrid-template-rows: 15% 70% 15%;\n\t}\n\t.chat-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 0 2rem;\n\t\t.user-details {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tgap: 1rem;\n\t\t\t.avatar {\n\t\t\t\timg {\n\t\t\t\t\theight: 3rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t.username {\n\t\t\t\th3 {\n\t\t\t\t\tcolor: white;\n\t\t\t\t\ttext-transform: capitalize;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t.chat-messages {\n\t\tpadding: 1rem 2rem;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t\toverflow: auto;\n\t\t&::-webkit-scrollbar {\n\t\t\twidth: 0.2rem;\n\t\t\t&-thumb {\n\t\t\t\tbackground-color: #ffffff39;\n\t\t\t\twidth: 0.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t}\n\t\t}\n\t\t.message {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\t.content {\n\t\t\t\tmax-width: 40%;\n\t\t\t\toverflow-wrap: break-word;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tfont-size: 1.1rem;\n\t\t\t\tborder-radius: 1rem;\n\t\t\t\tcolor: #d1d1d1;\n\t\t\t\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n\t\t\t\t\tmax-width: 70%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.sended {\n\t\t\tjustify-content: flex-end;\n\t\t\t.content {\n\t\t\t\tbackground-color: #4f04ff21;\n\t\t\t}\n\t\t}\n\t\t.recieved {\n\t\t\tjustify-content: flex-start;\n\t\t\t.content {\n\t\t\t\tbackground-color: #9900ff20;\n\t\t\t}\n\t\t}\n\t}\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}