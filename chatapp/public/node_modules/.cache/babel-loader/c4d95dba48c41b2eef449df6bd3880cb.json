{"ast":null,"code":"import { StackItem } from \"./chunk-AMDSPU3E.mjs\";\nimport { getDividerStyles, getStackStyles, selector } from \"./chunk-V4DIVZKN.mjs\"; // src/stack/stack.tsx\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cloneElement, Fragment, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  const styles = useMemo(() => getStackStyles({\n    direction,\n    spacing\n  }), [direction, spacing]);\n  const dividerStyle = useMemo(() => getDividerStyles({\n    spacing,\n    direction\n  }), [spacing, direction]);\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */jsx(StackItem, {\n        children: child\n      }, key);\n\n      const _child = shouldWrapChildren ? wrappedChild : child;\n\n      if (!hasDivider) return _child;\n      const clonedDivider = cloneElement(divider, {\n        __css: dividerStyle\n      });\n\n      const _divider = isLast ? null : clonedDivider;\n\n      return /* @__PURE__ */jsxs(Fragment, {\n        children: [_child, _divider]\n      }, key);\n    });\n  }, [divider, dividerStyle, hasDivider, shouldUseChildren, shouldWrapChildren, children]);\n\n  const _className = cx(\"chakra-stack\", className);\n\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: styles.flexDirection,\n    flexWrap: wrap,\n    className: _className,\n    __css: hasDivider ? {} : {\n      [selector]: styles[selector]\n    },\n    ...rest,\n    children: clones\n  });\n});\nStack.displayName = \"Stack\";\nexport { Stack };","map":{"version":3,"names":["StackItem","getDividerStyles","getStackStyles","selector","chakra","forwardRef","cx","getValidChildren","cloneElement","Fragment","useMemo","jsx","jsxs","Stack","props","ref","isInline","direction","directionProp","align","justify","spacing","wrap","children","divider","className","shouldWrapChildren","rest","styles","dividerStyle","hasDivider","shouldUseChildren","clones","validChildren","map","child","index","key","isLast","length","wrappedChild","_child","clonedDivider","__css","_divider","_className","div","display","alignItems","justifyContent","flexDirection","flexWrap","displayName"],"sources":["/Users/rajesh/Desktop/ChatApp/reactchatapp/public/node_modules/@chakra-ui/layout/dist/chunk-O5CRURSQ.mjs"],"sourcesContent":["import {\n  StackItem\n} from \"./chunk-AMDSPU3E.mjs\";\nimport {\n  getDividerStyles,\n  getStackStyles,\n  selector\n} from \"./chunk-V4DIVZKN.mjs\";\n\n// src/stack/stack.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { cloneElement, Fragment, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Stack = forwardRef((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n  const direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  const styles = useMemo(\n    () => getStackStyles({ direction, spacing }),\n    [direction, spacing]\n  );\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction]\n  );\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children);\n    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n      const key = typeof child.key !== \"undefined\" ? child.key : index;\n      const isLast = index + 1 === validChildren.length;\n      const wrappedChild = /* @__PURE__ */ jsx(StackItem, { children: child }, key);\n      const _child = shouldWrapChildren ? wrappedChild : child;\n      if (!hasDivider)\n        return _child;\n      const clonedDivider = cloneElement(\n        divider,\n        {\n          __css: dividerStyle\n        }\n      );\n      const _divider = isLast ? null : clonedDivider;\n      return /* @__PURE__ */ jsxs(Fragment, { children: [\n        _child,\n        _divider\n      ] }, key);\n    });\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children\n  ]);\n  const _className = cx(\"chakra-stack\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      display: \"flex\",\n      alignItems: align,\n      justifyContent: justify,\n      flexDirection: styles.flexDirection,\n      flexWrap: wrap,\n      className: _className,\n      __css: hasDivider ? {} : { [selector]: styles[selector] },\n      ...rest,\n      children: clones\n    }\n  );\n});\nStack.displayName = \"Stack\";\n\nexport {\n  Stack\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}