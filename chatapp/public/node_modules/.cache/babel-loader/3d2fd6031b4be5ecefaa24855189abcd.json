{"ast":null,"code":"/** @format */\n// /** @format */\n// import React, { useState, useEffect, useRef } from \"react\";\n// import styled from \"styled-components\";\n// import ChatInput from \"./ChatInput\";\n// import Logout from \"./Logout\";\n// import axios from \"axios\";\n// import {\n// \tallChats,\n// \tgetAllMessagesRoute,\n// \tsendMessageRoute,\n// \tsendMessageGroup,\n// } from \"../utils/APIRoutes\";\n// import { v4 as uuidv4 } from \"uuid\";\n// export default function GroupchatContainer({\n// \tcurrentChat,\n// \tcurrentUser,\n// \tsocket,\n// }) {\n// \t// console.log(`current chat :${JSON.stringify(currentChat)}`);\n// \t// console.log(`current user : ${JSON.stringify(currentUser)}`);\n// \tconst [messages, setMessages] = useState([]);\n// \tconst [arrivalMessage, setArrivalMessage] = useState(null);\n// \tconst scrollRef = useRef();\n// \tuseEffect(() => {\n// \t\tconst fetchData = async () => {\n// \t\t\tif (currentChat) {\n// \t\t\t\tconst response = await axios.post(allChats, {\n// \t\t\t\t\tfrom: currentUser._id,\n// \t\t\t\t\tto: currentChat._id,\n// \t\t\t\t});\n// \t\t\t\tsetMessages(response.data);\n// \t\t\t\tconsole.log(response);\n// \t\t\t\t//fetching single person chat Messages from db\n// \t\t\t\tconsole.log(\"chat message :\" + JSON.stringify(response.data));\n// \t\t\t}\n// \t\t};\n// \t\tfetchData();\n// \t}, [currentChat]);\n// \tconst handleSendMsg = async (msg) => {\n// \t\tawait axios.post(sendMessageGroup, {\n// \t\t\tfrom: currentUser._id,\n// \t\t\tto: currentChat._id,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\t// socket.current.emit(\"send-msg\", {\n// \t\t// \tto: currentChat._id,\n// \t\t// \tfrom: currentUser._id,\n// \t\t// \tmessage: msg,\n// \t\t// });\n// \t\tconst msgs = [...messages];\n// \t\tconsole.log(`messages :${JSON.stringify(msgs)}`);\n// \t\tmsgs.push({\n// \t\t\tfromSelf: true,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsetMessages(msgs);\n// \t\t// post message to db and emitting server\n// \t\t//console.log(\"sent Message :\" + JSON.stringify(msgs));\n// \t};\n// \t// useEffect(() => {\n// \t// \tif (socket.current) {\n// \t// \t\tsocket.current.on(\"msg-recieved\", (msg) => {\n// \t// \t\t\tsetArrivalMessage({\n// \t// \t\t\t\tfromSelf: false,\n// \t// \t\t\t\tmessage: msg,\n// \t// \t\t\t});\n// \t// \t\t});\n// \t// \t}\n// \t// }, []);\n// \tuseEffect(() => {\n// \t\tarrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\n// \t}, [arrivalMessage]);\n// \tuseEffect(() => {\n// \t\tscrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n// \t}, [messages]);\n// \t//console.log(JSON.stringify(messages));\n// \treturn (\n// \t\t<>\n// \t\t\t{currentChat && (\n// \t\t\t\t<Container>\n// \t\t\t\t\t<div className=\"chat-header\">\n// \t\t\t\t\t\t<div className=\"user-details\">\n// \t\t\t\t\t\t\t<div className=\"avatar\">\n// \t\t\t\t\t\t\t\t<img\n// \t\t\t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n// \t\t\t\t\t\t\t\t\talt=\"avatar\"\n// \t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t\t<h1 style={{ color: \"white\" }}>{currentChat.name}</h1>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<div className=\"username\">\n// \t\t\t\t\t\t\t\t<h3>{currentUser.name}</h3>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<Logout />\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className=\"chat-messages\">\n// \t\t\t\t\t\t{/* {messages.map((message) => {\n// \t\t\t\t\t\t\treturn (\n// \t\t\t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n// \t\t\t\t\t\t\t\t\t<div\n// \t\t\t\t\t\t\t\t\t\tclassName={`message ${\n// \t\t\t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n// \t\t\t\t\t\t\t\t\t\t}`}>\n// \t\t\t\t\t\t\t\t\t\t<div className=\"content \">\n// \t\t\t\t\t\t\t\t\t\t\t<p>{message.message}</p>\n// \t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t})} */}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<ChatInput handleSendMsg={handleSendMsg} />\n// \t\t\t\t</Container>\n// \t\t\t)}\n// \t\t</>\n// \t);\n// }\n// const Container = styled.div`\n// \tdisplay: grid;\n// \tgrid-template-rows: 10% 80% 10%;\n// \tgap: 0.1rem;\n// \toverflow: hidden;\n// \t@media screen and (min-width: 720px) and (max-width: 1080px) {\n// \t\tgrid-template-rows: 15% 70% 15%;\n// \t}\n// \t.chat-header {\n// \t\tdisplay: flex;\n// \t\tjustify-content: space-between;\n// \t\talign-items: center;\n// \t\tpadding: 0 2rem;\n// \t\t.user-details {\n// \t\t\tdisplay: flex;\n// \t\t\talign-items: center;\n// \t\t\tgap: 1rem;\n// \t\t\t.avatar {\n// \t\t\t\timg {\n// \t\t\t\t\theight: 3rem;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\t.username {\n// \t\t\t\th3 {\n// \t\t\t\t\tcolor: white;\n// \t\t\t\t\ttext-transform: capitalize;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t}\n// \t.chat-messages {\n// \t\tpadding: 1rem 2rem;\n// \t\tdisplay: flex;\n// \t\tflex-direction: column;\n// \t\tgap: 1rem;\n// \t\toverflow: auto;\n// \t\t&::-webkit-scrollbar {\n// \t\t\twidth: 0.2rem;\n// \t\t\t&-thumb {\n// \t\t\t\tbackground-color: #ffffff39;\n// \t\t\t\twidth: 0.1rem;\n// \t\t\t\tborder-radius: 1rem;\n// \t\t\t}\n// \t\t}\n// \t\t.message {\n// \t\t\tdisplay: flex;\n// \t\t\talign-items: center;\n// \t\t\t.content {\n// \t\t\t\tmax-width: 40%;\n// \t\t\t\toverflow-wrap: break-word;\n// \t\t\t\tpadding: 1rem;\n// \t\t\t\tfont-size: 1.1rem;\n// \t\t\t\tborder-radius: 1rem;\n// \t\t\t\tcolor: #d1d1d1;\n// \t\t\t\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n// \t\t\t\t\tmax-width: 70%;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t\t.sended {\n// \t\t\tjustify-content: flex-end;\n// \t\t\t.content {\n// \t\t\t\tbackground-color: #4f04ff21;\n// \t\t\t}\n// \t\t}\n// \t\t.recieved {\n// \t\t\tjustify-content: flex-start;\n// \t\t\t.content {\n// \t\t\t\tbackground-color: #9900ff20;\n// \t\t\t}\n// \t\t}\n// \t}\n// `;","map":{"version":3,"names":[],"sources":["/Users/rajesh/Desktop/Dev/chatapp/public/src/components/GroupchatContainer.jsx"],"sourcesContent":["/** @format */\n\n// /** @format */\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import styled from \"styled-components\";\n// import ChatInput from \"./ChatInput\";\n// import Logout from \"./Logout\";\n// import axios from \"axios\";\n// import {\n// \tallChats,\n// \tgetAllMessagesRoute,\n// \tsendMessageRoute,\n// \tsendMessageGroup,\n// } from \"../utils/APIRoutes\";\n// import { v4 as uuidv4 } from \"uuid\";\n\n// export default function GroupchatContainer({\n// \tcurrentChat,\n// \tcurrentUser,\n// \tsocket,\n// }) {\n// \t// console.log(`current chat :${JSON.stringify(currentChat)}`);\n// \t// console.log(`current user : ${JSON.stringify(currentUser)}`);\n// \tconst [messages, setMessages] = useState([]);\n// \tconst [arrivalMessage, setArrivalMessage] = useState(null);\n// \tconst scrollRef = useRef();\n\n// \tuseEffect(() => {\n// \t\tconst fetchData = async () => {\n// \t\t\tif (currentChat) {\n// \t\t\t\tconst response = await axios.post(allChats, {\n// \t\t\t\t\tfrom: currentUser._id,\n// \t\t\t\t\tto: currentChat._id,\n// \t\t\t\t});\n// \t\t\t\tsetMessages(response.data);\n// \t\t\t\tconsole.log(response);\n// \t\t\t\t//fetching single person chat Messages from db\n// \t\t\t\tconsole.log(\"chat message :\" + JSON.stringify(response.data));\n// \t\t\t}\n// \t\t};\n// \t\tfetchData();\n// \t}, [currentChat]);\n\n// \tconst handleSendMsg = async (msg) => {\n// \t\tawait axios.post(sendMessageGroup, {\n// \t\t\tfrom: currentUser._id,\n// \t\t\tto: currentChat._id,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\t// socket.current.emit(\"send-msg\", {\n// \t\t// \tto: currentChat._id,\n// \t\t// \tfrom: currentUser._id,\n// \t\t// \tmessage: msg,\n// \t\t// });\n\n// \t\tconst msgs = [...messages];\n// \t\tconsole.log(`messages :${JSON.stringify(msgs)}`);\n// \t\tmsgs.push({\n// \t\t\tfromSelf: true,\n// \t\t\tmessage: msg,\n// \t\t});\n// \t\tsetMessages(msgs);\n// \t\t// post message to db and emitting server\n// \t\t//console.log(\"sent Message :\" + JSON.stringify(msgs));\n// \t};\n\n// \t// useEffect(() => {\n// \t// \tif (socket.current) {\n// \t// \t\tsocket.current.on(\"msg-recieved\", (msg) => {\n// \t// \t\t\tsetArrivalMessage({\n// \t// \t\t\t\tfromSelf: false,\n// \t// \t\t\t\tmessage: msg,\n// \t// \t\t\t});\n// \t// \t\t});\n// \t// \t}\n// \t// }, []);\n\n// \tuseEffect(() => {\n// \t\tarrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\n// \t}, [arrivalMessage]);\n\n// \tuseEffect(() => {\n// \t\tscrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n// \t}, [messages]);\n\n// \t//console.log(JSON.stringify(messages));\n\n// \treturn (\n// \t\t<>\n// \t\t\t{currentChat && (\n// \t\t\t\t<Container>\n// \t\t\t\t\t<div className=\"chat-header\">\n// \t\t\t\t\t\t<div className=\"user-details\">\n// \t\t\t\t\t\t\t<div className=\"avatar\">\n// \t\t\t\t\t\t\t\t<img\n// \t\t\t\t\t\t\t\t\tsrc={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\n// \t\t\t\t\t\t\t\t\talt=\"avatar\"\n// \t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t\t<h1 style={{ color: \"white\" }}>{currentChat.name}</h1>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t<div className=\"username\">\n// \t\t\t\t\t\t\t\t<h3>{currentUser.name}</h3>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<Logout />\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className=\"chat-messages\">\n// \t\t\t\t\t\t{/* {messages.map((message) => {\n// \t\t\t\t\t\t\treturn (\n// \t\t\t\t\t\t\t\t<div ref={scrollRef} key={uuidv4()}>\n// \t\t\t\t\t\t\t\t\t<div\n// \t\t\t\t\t\t\t\t\t\tclassName={`message ${\n// \t\t\t\t\t\t\t\t\t\t\tmessage.fromSelf ? \"sended\" : \"recieved\"\n// \t\t\t\t\t\t\t\t\t\t}`}>\n// \t\t\t\t\t\t\t\t\t\t<div className=\"content \">\n// \t\t\t\t\t\t\t\t\t\t\t<p>{message.message}</p>\n// \t\t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t})} */}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<ChatInput handleSendMsg={handleSendMsg} />\n// \t\t\t\t</Container>\n// \t\t\t)}\n// \t\t</>\n// \t);\n// }\n\n// const Container = styled.div`\n// \tdisplay: grid;\n// \tgrid-template-rows: 10% 80% 10%;\n// \tgap: 0.1rem;\n// \toverflow: hidden;\n// \t@media screen and (min-width: 720px) and (max-width: 1080px) {\n// \t\tgrid-template-rows: 15% 70% 15%;\n// \t}\n// \t.chat-header {\n// \t\tdisplay: flex;\n// \t\tjustify-content: space-between;\n// \t\talign-items: center;\n// \t\tpadding: 0 2rem;\n// \t\t.user-details {\n// \t\t\tdisplay: flex;\n// \t\t\talign-items: center;\n// \t\t\tgap: 1rem;\n// \t\t\t.avatar {\n// \t\t\t\timg {\n// \t\t\t\t\theight: 3rem;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\t.username {\n// \t\t\t\th3 {\n// \t\t\t\t\tcolor: white;\n// \t\t\t\t\ttext-transform: capitalize;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t}\n// \t.chat-messages {\n// \t\tpadding: 1rem 2rem;\n// \t\tdisplay: flex;\n// \t\tflex-direction: column;\n// \t\tgap: 1rem;\n// \t\toverflow: auto;\n// \t\t&::-webkit-scrollbar {\n// \t\t\twidth: 0.2rem;\n// \t\t\t&-thumb {\n// \t\t\t\tbackground-color: #ffffff39;\n// \t\t\t\twidth: 0.1rem;\n// \t\t\t\tborder-radius: 1rem;\n// \t\t\t}\n// \t\t}\n// \t\t.message {\n// \t\t\tdisplay: flex;\n// \t\t\talign-items: center;\n// \t\t\t.content {\n// \t\t\t\tmax-width: 40%;\n// \t\t\t\toverflow-wrap: break-word;\n// \t\t\t\tpadding: 1rem;\n// \t\t\t\tfont-size: 1.1rem;\n// \t\t\t\tborder-radius: 1rem;\n// \t\t\t\tcolor: #d1d1d1;\n// \t\t\t\t@media screen and (min-width: 720px) and (max-width: 1080px) {\n// \t\t\t\t\tmax-width: 70%;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t\t.sended {\n// \t\t\tjustify-content: flex-end;\n// \t\t\t.content {\n// \t\t\t\tbackground-color: #4f04ff21;\n// \t\t\t}\n// \t\t}\n// \t\t.recieved {\n// \t\t\tjustify-content: flex-start;\n// \t\t\t.content {\n// \t\t\t\tbackground-color: #9900ff20;\n// \t\t\t}\n// \t\t}\n// \t}\n// `;\n"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}